
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	//output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output reg		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [1:0]		SW,

	output [3:0] tout0, tout1, tout2, tout3

);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire [3:0] si4_3;
wire [3:0] si4_2;
wire [3:0] si4_1;
wire [3:0] si4_0;

wire [3:0] so4_3;
wire [3:0] so4_2;
wire [3:0] so4_1;
wire [3:0] so4_0;

reg [3:0] display0, display1, display2, display3; 







//=======================================================
//  Structural coding
//=======================================================
testgen testgen_1(.select(SW[1:0]),.data0(si4_0),.data1(si4_1),.data2(si4_2),.data3(si4_3));
sort4 sort4_1(.ins4_3(si4_3),.ins4_2(si4_2),.ins4_1(si4_1),.ins4_0(si4_0),.outs4_3(so4_3),.outs4_2(so4_2),.outs4_1(so4_1),.outs4_0(so4_0));


always @(*) begin
	if(si4_0 == 4'b1111 | si4_1 == 4'b1111 |  si4_2 == 4'b1111 |  si4_3 == 4'b1111) begin
		LEDR[9]=1;
		end
		else begin
		LEDR[9]=0;
		end
	if (so4_0==4'b0000 | so4_1 == 4'b0000 | so4_2 == 4'b0000 | so4_3 == 4'b0000)begin
		LEDR[8]=1;
		end
		else begin
		LEDR[8]=0;
		end
	if(si4_0 == so4_0 & si4_1 == so4_1 & si4_2 == so4_2 & so4_3 == si4_3)begin
		LEDR[7]=1;
		end
		else begin
		LEDR[7]=0;
		end
	if(KEY[0] == 1) begin
		display0 = so4_0;
		display1 = so4_1;
		display2 = so4_2;
		display3 = so4_3;
		end
	else begin
		display0 = si4_0;
		display1 = si4_1;
		display2 = si4_2;
		display3 = si4_3;
	end
end
seg7 seg7_2(.seggy(display0),.HEX0(HEX2));
seg7 seg7_3(.seggy(display1),.HEX0(HEX3));
seg7 seg7_4(.seggy(display2),.HEX0(HEX4));
seg7 seg7_5(.seggy(display3),.HEX0(HEX5));

assign tout0=so4_3;
assign tout1=so4_2;
assign tout2=so4_1;
assign tout3=so4_0;



seg7 seg7_6(.seggy(({1'b0,1'b0,SW[1:0]})),.HEX0(HEX0));

	
endmodule
